{"version":3,"file":"parasol.js","sources":["../src/api/init.js","../src/api/sync.js","../src/api/linked.js","../src/state/defaultConfig.js","../src/state/initState.js","../src/index.js"],"sourcesContent":["import { select, selectAll } from 'd3';\nimport ParCoords from 'parcoord-es';\n\n/**\n* Setup a new visualization.\n*\n* @param config\n* @returns {ps} a parasol closure\n*/\nconst init = (config) => {\n\t/**\n  * Create a visualization within a container. The selector can also be a d3 selection.\n  *\n  * @param selection a d3 selection\n  * @returns {ps} instance for chained api, compatible with parcoords api\n  */\n\tconst ps = function(selection) {\n\t\tselection = ps.selection = selectAll(selection);\n\n\t\t// store pc charts in array\n\t\tps.charts = [];\n\t\tselection\n\t\t\t.each( function(d,i) {\n\t\t\t\tps.charts[i] = ParCoords(config.chartOptions)(this)\n\t\t\t\t\t.data(config.data)\n\t\t\t\t\t.alpha(0.4)\n\t\t\t\t\t.render()\n\t\t\t\t\t.mode('queue')\n\t\t\t\t\t.brushMode('1D-axes'); //1D-axes must be used with linking\n\t\t\t});\n\t\t// for chained api\n\t\treturn ps;\n\t};\n\t// for partial-application style programming\n\treturn ps;\n};\n\nexport default init;\n","import { union, intersection } from 'lodash-es';\n\n// synchronize data between linked components\nconst sync = (config, ps, flags) =>\n\tfunction() {\n\n\t\t//obtain array of brushed data for each chart\n\t\tconst brush_extents = [];\n\t\tconfig.linked.forEach( pc => {\n\t\t\tbrush_extents.push(pc.selected());\n\t\t});\n\t\t// console.log(brush_extents);\n\n\t\t//check edge case where all brushes individually clicked away\n\t\t// console.log(union(...brush_extents));\n\t\tif (union(...brush_extents).length == 0) {\n\t\t\tconfig.linked.forEach( pc => {\n\t\t\t\tpc.brushReset();\n\t\t\t});\n\t\t\t// if (flags.grid === true) {\n\t\t\t// \tps.gridUpdate(config.data);\n\t\t\t// }\n\t\t} else {\n\t\t\tconst brushed = intersection(...brush_extents);\n\t\t\t// console.log(brushed);\n\t\t\tconfig.linked.forEach( pc => {\n\t\t\t\tpc.brushed(brushed).render();\n\t\t\t});\n\t\t\t// if (flags.grid === true) {\n\t\t\t// \tps.gridUpdate(brush_extents);\n\t\t\t// }\n\t\t}\n\t};\n\nexport default sync;\n","import sync from './sync';\n\n// link brush activity between user specified charts, and grid if it exists\nconst linked = (config, ps, flags) =>\n\tfunction (chartList = ps.charts) {\n\t\tconfig.linked = chartList;\n\t\tchartList.forEach( pc => {\n\t\t\tpc.on('brush', sync(config, ps, flags) );\n\t\t});\n\n\t\t// connect grid\n\t\t// highlight row in charts\n\t\t// config.grid.onMouseEnter.subscribe( (e, args) => {\n\t\t//   const i = grid.getCellFromEvent(e).row;\n\t\t//   const d = config.brushed || config.data;\n\t\t//   pv.charts.forEach( pc => {\n\t\t//     pc.highlight([d[i]]);\n\t\t//   })\n\t\t// });\n\t\t// config.grid.onMouseLeave.subscribe( (e, args) => {\n\t\t//   pv.charts.forEach( (pc) => {\n\t\t//     pc.unhighlight();\n\t\t//   })\n\t\t// });\n\n\t\t// mark / unmark rows in charts\n\t\t// config.grid.onSelectedRowsChanged.subscribe( (e, args) => {\n\t\t//   const selected_row_ids = config.grid.getSelectedRows();\n\t\t//   if (config.brushed) {\n\t\t//     // nothing outside of brushed should be markable\n\t\t//     const d = config.brushed;\n\t\t//   } else {\n\t\t//     const d = config.data;\n\t\t//   }\n\t\t//   pv.charts.forEach( (pc) => {\n\t\t//     pc.unmark();\n\t\t//     pc.mark(selected_row_ids); //NOTE: this may not work initially\n\t\t//   })\n\t\t// });\n\n\t\treturn this;\n\t};\n\nexport default linked;\n","const DefaultConfig = {\n\tdata: [],\n\tpartition: {}, // identifies which plots vars appear on\n\tdataView: false,\n\tgrid: false,\n\tchartOptions: {},\n\tlinked: [], // list of linked objects\n\tbrushed: [], // intersection of all brushed data\n\tmarked: [], // union of all marked data\n\tselections: [], // union of brushed and marked\n};\n\nexport default DefaultConfig;\n","import { entries, keys, dispatch } from 'd3';\n\nimport DefaultConfig from './defaultConfig';\n\nconst initState = (data, userConfig) => {\n\tconst config = Object.assign({}, DefaultConfig, userConfig);\n\tconfig.data = data;\n\n\tconst eventTypes = [\n\t\t// 'data', // when data in a chart is updated, how does this cascade to linked?\n\t\t// 'render',\n\t\t// 'resize',\n\t\t// 'highlight',\n\t\t// 'mark',\n\t\t'brush',\n\t\t'brushend',\n\t\t'brushstart',\n\t\t// 'axesreorder',\n\t].concat(keys(config));\n\n\tconst events = dispatch.apply(this, eventTypes),\n\t\tflags = {\n\t\t\tlinked: false,\n\t\t\tgrid: false,\n\t\t\t// axes: false,\n\t\t\t// interactive: false,\n\t\t\t// debug: false,\n\t\t};\n\t// xscale = scalePoint(),\n\t// dragging = {},\n\t// axis = axisLeft().ticks(5),\n\t// ctx = {},\n\t// canvas = {};\n\n\treturn {\n\t\tconfig,\n\t\tevents,\n\t\teventTypes,\n\t\tflags,\n\t};\n};\n\nexport default initState;\n","//css\nimport './parallel-coordinates.css';\n\n//misc\n\n\n//api\nimport init from './api/init';\n// import attachGrid from './api/attachGrid';\n// import gridUpdate from './api/gridUpdate';\nimport linked from './api/linked';\n\nimport initState from './state/initState';\n// import bindEvents from './bindEvents';\nimport { version } from '../package.json';\n\n\nconst Parasol = (data, userConfig) => {\n\tconst state = initState(data, userConfig);\n\tconst {\n\t\tconfig,\n\t\tevents,\n\t\tflags,\n\t} = state;\n\n\tconst ps = init(config);\n\n\t// bindEvents();\n\n\t// expose the state of charts and grid\n\tps.state = config;\n\tps.flags = flags;\n\tps.version = version;\n\t// ps.grid = config.grid;\n\t// ps.dataview = config.dataview;\n\n\t// ps.attachGrid = attachGrid(config, flags);\n\t// ps.gridUpdate = gridUpdate(config, flags);\n\tps.linked = linked(config, ps, flags);\n\n\n\treturn ps;\n};\n\nexport default Parasol;\n"],"names":["init","config","ps","selection","selectAll","charts","each","d","i","ParCoords","chartOptions","data","alpha","render","mode","brushMode","sync","flags","brush_extents","linked","forEach","push","pc","selected","union","length","brushReset","brushed","intersection","chartList","on","DefaultConfig","partition","dataView","grid","marked","selections","initState","userConfig","Object","assign","eventTypes","concat","keys","events","dispatch","apply","Parasol","state","version"],"mappings":"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"}